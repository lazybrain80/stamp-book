generator client {
  provider     = "prisma-kysely"
  output       = "."
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
  connection_limit = 1  // 서버리스 환경에서는 최대 1개의 연결만 유지
  pool_timeout = 30000  // 타임아웃 (밀리초 단위)
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

model Customer {
  id                     Int               @id @default(autoincrement())
  authUserId             String
  name                   String?
  plan                   SubscriptionPlan?
  stripeCustomerId       String?           @unique
  stripeSubscriptionId   String?           @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now())

  @@index([authUserId])
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  PENDING
  CREATING
  INITING
  RUNNING
  STOPPED
  DELETED
}
